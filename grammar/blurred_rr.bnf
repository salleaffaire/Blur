# Blurred Programming Language Grammar (BNF)
# ----------------------------------------------------------------------------------------

# Program structure
> <program>
/ ''

# Top level 
<program> ::= <decdef-list>

# Right-Recursion version
<decdef-list> ::= <decdef> <decdef-rest>
<decdef-rest> ::= <decdef> <decdef-rest> | ''

<decdef> ::= <data-definition> | <fun-declaration> | <struct-declaration> | <using>

# Struct
# ----------------------------------------------------------------------------------------
<using> ::= using literal

# Struct
# ----------------------------------------------------------------------------------------
<struct-declaration> ::=  struct name { <decdef-list> }

# Var
# ----------------------------------------------------------------------------------------
<data-definition> ::= <data-definition-front> ; |
                      <data-definition-front> <data-definition-tail> ; 

<data-definition-front> ::= var <type-specifier> name
<data-definition-tail>  ::= if ( <complex-expression> )

<type-specifier> ::= <base-type> <array-definition> |
                     <base-type>

<array-definition> ::= <array-definition> [ numeral ] |
                       <array-definition> [ dotdot ] |        
                       [ numeral ] |
                       [ dotdot ]

<base-type> ::= bit |
                list { <type-specifier> } |
                void |
                name

# Functions 
<fun-declaration> ::= func <type-specifier> name ( <params> ) <statement>

<params> ::= <param-list> | ''

# These 2 are implemented together in the parser
<param-list> ::= <param-list> , <param> | <param>
<param> ::= <type-specifier> name

# Statements
<statement> ::= <expression-statement> |   
                <compound-statement> |
                <if-statement> |
                <return-statement> |
                <for-statement> |
                <while-statement> |
                <foreach-statement> |
                <return-statement> |
                <break-statement> |
                <data-definition> |
                ''

<expression-statement> ::= <expression> ; | ;

<compound-statement> ::= { <statement-list> }

<statement-list> ::= <statement-list> <statement> | ''

<if-statement> ::= if ( <expression> ) <statement> |
                   if ( <expression> ) <statement> else <statement>

<return-statement> ::= return ; |
                       return <expression> ;

<break-statement> ::= break ;

<while-statement> ::= while ( <expression> ) statement

<foreach-statement> ::=
                      foreach ( <mutable> in name ) statement

<for-statement> ::= for ( <expression> ; <expression> ; <expression> ) <statement>

# Expressions
<expression> ::= <mutable> = <expression> | 
                 <complex-expression>

# <simple-expression> is my r-value
# I think I finally got an LL(1) expression grammar

<complex-expression> ::= <simple-expression> <complex-expression-tail>
<complex-expression-tail> ::= . <call>

<simple-expression> ::= <simple-term> <simple-expression-tail>
<simple-expression-tail> ::= <bin-operator-1> <simple-term> |
                             <bin-operator-1> <simple-term> <simple-expression-tail> | 
                             ''
<simple-term> ::= <simple-factor> <simple-term-tail>
<simple-term-tail> ::= <bin-operator-2> <simple-factor> |
                       <bin-operator-2> <simple-factor> <simple-term-tail> | 
                       ''

<simple-factor> ::=  <defered-call> |
                     <call> |
                     <constant> |
                     <mutable> |
                     <un-opertor> <simple-term> |
                     ( <complex-expression> )


# Weak operators
<bin-operator-1> ::= + | - | & | ^ | < | > | <= | >= | == | >> | << | && 

#Strong operators
<bin-operator-2> ::= * | / | %

<un-operator> ::= + | - | ! | ~

<defered-call> ::= -> <call>

<call> ::= name ( <args> )

<args> ::= <arg-list> | ''

<arg-list> ::= <arg-list> , <arg> | <arg>

<arg> ::= <complex-expression>

<constant> ::= numeral | 
               literal |
               true |
               false

<mutable> ::= name